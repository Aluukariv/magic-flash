#!/system/bin/sh
export PATH=/sbin:/dev/sbin:/system/bin:/system/xbin
exec 2>/dev/null
VALUE="$1"
abort(){
    echo "$1"
    exit 1
}
flash(){
    test "$(id -u)" == 0 || abort "! Root user only!"
    if [ ! -z "$(magisk -v)" ]; then
        echo "Found Magisk: $(magisk -v)"
        PATH="$(magisk --path)/.magisk/busybox:/sbin:/system/bin:/system/xbin"
    fi
    command -v busybox &>/dev/null || abort "! Busybox not found"
    [ ! -e "$(command -v busybox)" ] && abort "! Busybox not found"

    # create suitable environment to flash!!
    export NEWROOT="/dev/rootfs_$$"

    rm -rf $NEWROOT
    rm -rf /data/adb/sideload
    mkdir $NEWROOT
    mkdir /data/adb/sideload
    chmod 777 /data/adb/sideload
    chcon u:object_r:system_file:s0 /data/adb/sideload
    mount -t tmpfs tmpfs $NEWROOT || abort "! Failed to prepare chroot environment"


    mountpoint -q /vendor && vendor=vendor || ln -sf /system/vendor $NEWROOT/vendor
    mountpoint -q /system_ext && system_ext=system_ext || ln -sf /system/system_ext $NEWROOT/system_ext
    mountpoint -q /product && product=product || ln -sf /system/product $NEWROOT/product


    [ -e $NEWROOT/bin ] || ln -s /system/bin $NEWROOT/bin
    [ -e $NEWROOT/etc ] || ln -s /system/etc $NEWROOT/etc
    [ -e $NEWROOT/lib ] || ln -s /system/lib $NEWROOT/lib
    [ -e $NEWROOT/lib64 ] || ln -s /system/lib64 $NEWROOT/lib64



    for dir in apex cache data sbin system/bin $vendor $system_ext $product sys proc dev sideload sdcard sysblock; do
        mkdir -p $NEWROOT/$dir
    done
    
    mount -t tmpfs tmpfs $NEWROOT/sysblock
    #make sure sh exists
     cat "$(command -v busybox)" >"$NEWROOT/system/bin/sh"
     chmod 777 "$NEWROOT/system/bin/sh"
     
     cat /system/build.prop >"$NEWROOT/system/build.prop"
    
     
     if [ "$NOSYSTEM" != 1 ]; then
         mount --bind /system $NEWROOT/system
         for systemfs in /vendor /product /system_ext; do
             if mountpoint -q $systemfs; then
                 mount --bind $systemfs $NEWROOT/$systemfs
             fi
         done
     else
         echo "NOSYSTEM: Ignore mount system partition"
     fi
    

     sysroot_major_minor="$(mountpoint -d /)"
     sysroot_major="${sysroot_major_minor%:*}"
     sysroot_minor="${sysroot_major_minor: ${#sysroot_major}+1}"
     if [ "$sysroot_major" != "0" ]; then
         echo "Device is system-as-root"
         mknod -m 666 "$NEWROOT/sysblock/system_root" b "$sysroot_major" "$sysroot_minor"
         mkdir "$NEWROOT/system_root"
         if [ "$NOSYSTEM" != 1 ]; then
             mount -o ro "$NEWROOT/sysblock/system_root" "$NEWROOT/system_root"
         fi
     fi

     mount --bind /system/apex "$NEWROOT/apex"
     mount --bind /dev "$NEWROOT/dev"
     mount --bind /data "$NEWROOT/data"
     mount --bind /data/adb/sideload "$NEWROOT/sideload"
     mount --bind /sdcard "$NEWROOT/sdcard"
     mount -t sysfs sysfs "$NEWROOT/sys"
     mount -t proc proc "$NEWROOT/proc"

     if [ "$NOSYSTEM" != 1 ]; then
         if [ "$SYSTEM_MODE" == "ro" ]; then
             echo "SYSTEM_MODE: read-only"
             for systemfs in /system_root /system /vendor /product /system_ext; do
                 mountpoint -q $NEWROOT/$systemfs && { mount -o ro,remount $NEWROOT/$systemfs || echo "! Can't remount $systemfs as read-only"; }
             done
             echo "Mounted all system partitions as read-only"
         elif [ "$SYSTEM_MODE" == "rw" ]; then
             echo "SYSTEM_MODE: read-write"
             for systemfs in /system_root /system /vendor /product /system_ext; do
                 mountpoint -q $NEWROOT/$systemfs && { mount -o rw,remount $NEWROOT/$systemfs || echo "! Can't remount $systemfs as read-write"; }
             done
          fi
      fi

     cp "$(command -v busybox)" $NEWROOT/sbin/busybox
     
     #install busybox into path
     $NEWROOT/sbin/busybox --install $NEWROOT/sbin

      export TMPDIR=/tmp
      mkdir $NEWROOT/tmp
      mount -t tmpfs tmpfs $NEWROOT/tmp
    for zip in "$@"; do
        ( flash_process "$zip"; )
    done
      
     #clean environment
    umount -l $NEWROOT
    rm -rf $NEWROOT
    rm -rf /data/adb/sideload
}
flash_process(){
    ZIP="$1"
    [ "$DEBUG" == 1 ] && { set -x; exec 2>&1; } && echo "DEBUG: is on"
    [ "$ZIP" == "flash" ] && unset ZIP
    test -z "$ZIP" && abort "! Please provide a zip"
    
    
      ZIP_NAME="$(basename "$ZIP")"
      rm -rf "$NEWROOT/sideload/$ZIP_NAME"
      cp "$ZIP" "$NEWROOT/sideload/$ZIP_NAME"
      ZIP="$NEWROOT/sideload/$ZIP_NAME"
      ZIP_CHROOT="/sideload/$ZIP_NAME"

     

    unzip -oj "$ZIP" "META-INF/com/google/android/update-binary" -d "$NEWROOT/sbin" &>/dev/null
    echo "Flashing \"$ZIP_NAME\""
    chmod 777 "$NEWROOT/sbin/update-binary"
    
    $NEWROOT/sbin/busybox chroot $NEWROOT "/sbin/update-binary" 3 1 "$ZIP_CHROOT"

    
    echo "Flashing exists with code $?"
    
    
}
if [ "$VALUE" == "flash" ]; then
    exec "$@"; 
elif [ ! -z "$1" ]; then 
    exec unshare -m sh "$0" flash "$@";
else 
    echo -e "Flash any recovery zip without using Custom Recovery\nFlashing will be processed in isolated chroot evironment\nMultiple flashing at same time are allowed\nMake sure the current environment is clean\n usage: $(basename "$0") ZIP\n        $(basename "$0") ZIP1 ZIP2...\n environment variable flag:\n   NOSYSTEM=0 - Ignore mount system partition in chroot\n   SYSTEM_MODE=ro - Remount all system partitions as read-only \n   SYSTEM_MODE=rw - Remount all system partitions as read-write\n   DEBUG=1 - Show all error dialogs"; 
fi
